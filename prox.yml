---
- hosts: all
  gather_facts: false
  strategy: free
  tasks:
    # tailscale
    - ansible.builtin.shell: ls /usr/share/keyrings/tailscale-archive-keyring.gpg || ( curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg | tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null )
      register: result_ts_keyring
      changed_when: ("/usr/share/keyrings/tailscale-archive-keyring.gpg" not in result_ts_keyring.stdout)
    - ansible.builtin.shell: ls /etc/apt/sources.list.d/tailscale.list || ( curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.tailscale-keyring.list | tee /etc/apt/sources.list.d/tailscale.list )
      register: result_ts_sources
      changed_when: ("/etc/apt/sources.list.d/tailscale.list" not in result_ts_sources.stdout)
    - ansible.builtin.apt:
        pkg:
        - snapd
        state: absent
    - ansible.builtin.apt:
        pkg:
        - tailscale
        - iperf3
        - docker.io
        state: latest
        update_cache: yes
        lock_timeout: 120
    - ansible.builtin.lineinfile:
        path: /etc/security/limits.conf
        regexp: '^ubuntu soft nofile '
        line: ubuntu soft nofile 51200
    - ansible.builtin.lineinfile:
        path: /etc/security/limits.conf
        regexp: '^ubuntu hard nofile '
        line: ubuntu hard nofile 51200
    - ansible.builtin.copy:
        src: files/sysctl.conf
        dest: /etc/sysctl.conf
        mode: '0644'
    - ansible.builtin.shell: sysctl -p /etc/sysctl.conf
    - ansible.builtin.copy:
        src: files/50-tailscale
        dest: /etc/networkd-dispatcher/routable.d/50-tailscale
        mode: '0755'
    - ansible.builtin.shell: /etc/networkd-dispatcher/routable.d/50-tailscale
    - ansible.builtin.shell: /usr/bin/tailscale set --auto-update
    - ansible.builtin.shell: /usr/bin/tailscale up --auth-key {{ auth_key }} --advertise-exit-node --hostname={{ machine_name }}

    # shadowsocks2 & v2ray plugin
    - ansible.builtin.copy:
        src: files/shadowsocks2-linux-arm64
        dest: /home/ubuntu
        mode: '0755'
      become: true
      become_user: ubuntu
    - ansible.builtin.copy:
        src: files/v2ray-plugin_linux_arm64
        dest: /home/ubuntu
        mode: '0755'
      become: true
      become_user: ubuntu
    - ansible.builtin.copy:
        src: files/start-ss
        dest: /home/ubuntu
        mode: '0755'
      become: true
      become_user: ubuntu
    # setup crontab to run shadowsocks on reboot
    - ansible.builtin.cron:
        name: "start shadowsocks"
        special_time: "reboot"
        job: "/home/ubuntu/start-ss &"
      become: true
      become_user: ubuntu
    # update the IP address
    - ansible.builtin.copy:
        src: files/noip-duc.env
        dest: /home/ubuntu
        mode: '0400'
      become: true
      become_user: ubuntu
    - name: allow ubuntu user to run docker commands
      ansible.builtin.user:
        name: ubuntu
        groups: docker
        append: true
    - ansible.builtin.cron:
        name: "update IP address"
        special_time: "reboot"
        job: "docker run --env-file /home/ubuntu/noip-duc.env ghcr.io/noipcom/noip-duc:latest --once -v > /home/ubuntu/noip-duc.log 2>&1"
      become: true
      become_user: ubuntu
    # reboot machine to test
    - ansible.builtin.reboot:
