---
- hosts: all
  gather_facts: false
  strategy: free
  tasks:
    - name: setup tailscale keyring1
      ansible.builtin.shell: ls /usr/share/keyrings/tailscale-archive-keyring.gpg || ( curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg | tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null )
      register: result_ts_keyring
      changed_when: ("/usr/share/keyrings/tailscale-archive-keyring.gpg" not in result_ts_keyring.stdout)
      tags:
        - tailscale
    - name: setup tailscale keyring2
      ansible.builtin.shell: ls /etc/apt/sources.list.d/tailscale.list || ( curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.tailscale-keyring.list | tee /etc/apt/sources.list.d/tailscale.list )
      register: result_ts_sources
      changed_when: ("/etc/apt/sources.list.d/tailscale.list" not in result_ts_sources.stdout)
      tags:
        - tailscale
    - name: uninstall not required tools
      ansible.builtin.apt:
        pkg:
        - snapd
        state: absent
        lock_timeout: 240
    - name: install required tools
      ansible.builtin.apt:
        pkg:
        - tailscale
        - iperf3
        - docker.io
        state: latest
        update_cache: yes
        lock_timeout: 240
      tags:
        - tailscale
        - shadowsocks
    - name: update soft open file limit
      ansible.builtin.lineinfile:
        path: /etc/security/limits.conf
        regexp: '^ubuntu soft nofile '
        line: ubuntu soft nofile 51200
      tags:
        - tailscale
        - shadowsocks
    - name: update hard open file limit
      ansible.builtin.lineinfile:
        path: /etc/security/limits.conf
        regexp: '^ubuntu hard nofile '
        line: ubuntu hard nofile 51200
      tags:
        - tailscale
        - shadowsocks
    - name: update kernel configs - sysctl.conf
      ansible.builtin.copy:
        src: files/sysctl.conf
        dest: /etc/sysctl.conf
        mode: '0644'
      tags:
        - tailscale
        - shadowsocks
    - name: load new kernel configs - sysctl.conf
      ansible.builtin.shell: sysctl -p /etc/sysctl.conf
      tags:
        - tailscale
        - shadowsocks
    - name: copy networking config for exit nodes
      ansible.builtin.copy:
        src: files/50-tailscale
        dest: /etc/networkd-dispatcher/routable.d/50-tailscale
        mode: '0755'
      tags:
        - tailscale
    - name: update networking config for exit nodes
      ansible.builtin.shell: /etc/networkd-dispatcher/routable.d/50-tailscale
      tags:
        - tailscale
    - name: update config for tailscale daemon
      ansible.builtin.shell: /usr/bin/tailscale set --auto-update
      tags:
        - tailscale
    - name: start the tailscale daemon
      ansible.builtin.shell: /usr/bin/tailscale up --auth-key {{ auth_key }} --advertise-exit-node --hostname={{ machine_name }}
      tags:
        - tailscale
    - name: copy shadowsocks binary
      ansible.builtin.copy:
        src: files/shadowsocks2-linux-arm64
        dest: /home/ubuntu
        mode: '0755'
      become: true
      become_user: ubuntu 
      tags:
        - shadowsocks
    - name: copy v2ray plugin binary
      ansible.builtin.copy:
        src: files/v2ray-plugin_linux_arm64
        dest: /home/ubuntu
        mode: '0755'
      become: true
      become_user: ubuntu
      tags:
        - shadowsocks
    - name: copy shadowsocks server start script
      ansible.builtin.copy:
        src: files/start-ss
        dest: /home/ubuntu
        mode: '0755'
      become: true
      become_user: ubuntu
      tags:
        - shadowsocks
    - name: copy tmpsc.net cert and key files
      ansible.builtin.copy:
        src: files/tmpsc.net/
        dest: /home/ubuntu/tmpsc.net/
        mode: '0400'
      become: true
      become_user: ubuntu
      tags:
        - shadowsocks
    - name: setup cron to start shadowsocks server on reboot
      ansible.builtin.cron:
        name: "start shadowsocks"
        special_time: "reboot"
        job: "/home/ubuntu/start-ss &"
      become: true
      become_user: ubuntu
      tags:
        - shadowsocks
    - name: copy configuration for ddns domain
      ansible.builtin.copy:
        src: files/noip-duc.env
        dest: /home/ubuntu
        mode: '0400'
      become: true
      become_user: ubuntu
      tags:
        - ddns
    - name: allow ubuntu user to run docker commands to update ddns IP address
      ansible.builtin.user:
        name: ubuntu
        groups: docker
        append: true
      tags:
        - ddns
    - name: add cron to update IP address on reboot
      ansible.builtin.cron:
        name: "update IP address"
        special_time: "reboot"
        job: "docker run --env-file /home/ubuntu/noip-duc.env ghcr.io/noipcom/noip-duc:latest --once -v > /home/ubuntu/noip-duc.log 2>&1"
      become: true
      become_user: ubuntu
      tags:
        - ddns
    - name: add cron to shutdown server at 10pm UTC+0800
      ansible.builtin.cron:
        name: "shutdown server"
        hour: "14"
        minute: "0"
        job: "shutdown -h now"
      tags:
        - costs
    - name: add cron to shutdown server at 12pm UTC+1000
      ansible.builtin.cron:
        name: "shutdown server2"
        hour: "16"
        minute: "0"
        job: "shutdown -h now"
      tags:
        - costs
    - name: copy ghostty xterm config
      ansible.builtin.copy:
        src: files/xterm-ghostty-tic.txt
        dest: /home/ubuntu
        mode: '0400'
      become: true
      become_user: ubuntu
      tags:
        - ghostty
    - name: import ghostty xterm config
      ansible.builtin.shell: tic -x xterm-ghostty-tic.txt
      become: true
      become_user: ubuntu
      tags:
        - ghostty
    - name: reboot machine to test startup
      ansible.builtin.reboot:
      tags:
        - ddns
